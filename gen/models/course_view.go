// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CourseView CourseView
//
// All details about the Airplane (DTO)
//
// swagger:model CourseView
type CourseView struct {

	// difficulty level
	DifficultyLevel int32 `json:"difficultyLevel,omitempty"`

	// end date
	EndDate string `json:"endDate,omitempty"`

	// enrollments
	Enrollments []*EnrollmentView `json:"enrollments"`

	// id
	ID int64 `json:"id,omitempty"`

	// seats
	Seats int32 `json:"seats,omitempty"`

	// start date
	StartDate string `json:"startDate,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this course view
func (m *CourseView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnrollments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CourseView) validateEnrollments(formats strfmt.Registry) error {

	if swag.IsZero(m.Enrollments) { // not required
		return nil
	}

	for i := 0; i < len(m.Enrollments); i++ {
		if swag.IsZero(m.Enrollments[i]) { // not required
			continue
		}

		if m.Enrollments[i] != nil {
			if err := m.Enrollments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enrollments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CourseView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CourseView) UnmarshalBinary(b []byte) error {
	var res CourseView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
