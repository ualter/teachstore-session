// Code generated by go-swagger; DO NOT EDIT.

package enrollment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// CleanUsingGETReader is a Reader for the CleanUsingGET structure.
type CleanUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CleanUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCleanUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewCleanUsingGETAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCleanUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCleanUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCleanUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCleanUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCleanUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCleanUsingGETOK creates a CleanUsingGETOK with default headers values
func NewCleanUsingGETOK() *CleanUsingGETOK {
	return &CleanUsingGETOK{}
}

/*CleanUsingGETOK handles this case with default header values.

Request succeeded
*/
type CleanUsingGETOK struct {
	Payload []interface{}
}

func (o *CleanUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /api/enrollments/cache/clean][%d] cleanUsingGETOK  %+v", 200, o.Payload)
}

func (o *CleanUsingGETOK) GetPayload() []interface{} {
	return o.Payload
}

func (o *CleanUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCleanUsingGETAccepted creates a CleanUsingGETAccepted with default headers values
func NewCleanUsingGETAccepted() *CleanUsingGETAccepted {
	return &CleanUsingGETAccepted{}
}

/*CleanUsingGETAccepted handles this case with default header values.

Accepted
*/
type CleanUsingGETAccepted struct {
	Payload []interface{}
}

func (o *CleanUsingGETAccepted) Error() string {
	return fmt.Sprintf("[GET /api/enrollments/cache/clean][%d] cleanUsingGETAccepted  %+v", 202, o.Payload)
}

func (o *CleanUsingGETAccepted) GetPayload() []interface{} {
	return o.Payload
}

func (o *CleanUsingGETAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCleanUsingGETBadRequest creates a CleanUsingGETBadRequest with default headers values
func NewCleanUsingGETBadRequest() *CleanUsingGETBadRequest {
	return &CleanUsingGETBadRequest{}
}

/*CleanUsingGETBadRequest handles this case with default header values.

Bad Request
*/
type CleanUsingGETBadRequest struct {
}

func (o *CleanUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/enrollments/cache/clean][%d] cleanUsingGETBadRequest ", 400)
}

func (o *CleanUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCleanUsingGETUnauthorized creates a CleanUsingGETUnauthorized with default headers values
func NewCleanUsingGETUnauthorized() *CleanUsingGETUnauthorized {
	return &CleanUsingGETUnauthorized{}
}

/*CleanUsingGETUnauthorized handles this case with default header values.

Not authorized
*/
type CleanUsingGETUnauthorized struct {
}

func (o *CleanUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/enrollments/cache/clean][%d] cleanUsingGETUnauthorized ", 401)
}

func (o *CleanUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCleanUsingGETForbidden creates a CleanUsingGETForbidden with default headers values
func NewCleanUsingGETForbidden() *CleanUsingGETForbidden {
	return &CleanUsingGETForbidden{}
}

/*CleanUsingGETForbidden handles this case with default header values.

Access forbidden
*/
type CleanUsingGETForbidden struct {
}

func (o *CleanUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /api/enrollments/cache/clean][%d] cleanUsingGETForbidden ", 403)
}

func (o *CleanUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCleanUsingGETNotFound creates a CleanUsingGETNotFound with default headers values
func NewCleanUsingGETNotFound() *CleanUsingGETNotFound {
	return &CleanUsingGETNotFound{}
}

/*CleanUsingGETNotFound handles this case with default header values.

Not found
*/
type CleanUsingGETNotFound struct {
}

func (o *CleanUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /api/enrollments/cache/clean][%d] cleanUsingGETNotFound ", 404)
}

func (o *CleanUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCleanUsingGETInternalServerError creates a CleanUsingGETInternalServerError with default headers values
func NewCleanUsingGETInternalServerError() *CleanUsingGETInternalServerError {
	return &CleanUsingGETInternalServerError{}
}

/*CleanUsingGETInternalServerError handles this case with default header values.

Internal Server Error
*/
type CleanUsingGETInternalServerError struct {
}

func (o *CleanUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/enrollments/cache/clean][%d] cleanUsingGETInternalServerError ", 500)
}

func (o *CleanUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
