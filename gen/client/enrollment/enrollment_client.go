// Code generated by go-swagger; DO NOT EDIT.

package enrollment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new enrollment API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for enrollment API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CleanUsingGET(params *CleanUsingGETParams) (*CleanUsingGETOK, *CleanUsingGETAccepted, error)

	CreateUsingPOST(params *CreateUsingPOSTParams) (*CreateUsingPOSTCreated, error)

	FindByCourseUsingGET(params *FindByCourseUsingGETParams) (*FindByCourseUsingGETOK, error)

	FindByIDUsingGET(params *FindByIDUsingGETParams) (*FindByIDUsingGETOK, error)

	ListUsingGET(params *ListUsingGETParams) (*ListUsingGETOK, error)

	RemoveByIDUsingDELETE(params *RemoveByIDUsingDELETEParams) (*RemoveByIDUsingDELETEOK, *RemoveByIDUsingDELETENoContent, error)

	UpdateUsingPUT(params *UpdateUsingPUTParams) (*UpdateUsingPUTCreated, *UpdateUsingPUTAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CleanUsingGET cleans enrollments cache
*/
func (a *Client) CleanUsingGET(params *CleanUsingGETParams) (*CleanUsingGETOK, *CleanUsingGETAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCleanUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cleanUsingGET",
		Method:             "GET",
		PathPattern:        "/api/enrollments/cache/clean",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CleanUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CleanUsingGETOK:
		return value, nil, nil
	case *CleanUsingGETAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enrollment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUsingPOST creates an enrollment
*/
func (a *Client) CreateUsingPOST(params *CreateUsingPOSTParams) (*CreateUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUsingPOST",
		Method:             "POST",
		PathPattern:        "/api/enrollments",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUsingPOSTCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindByCourseUsingGET finds enrollments of a course
*/
func (a *Client) FindByCourseUsingGET(params *FindByCourseUsingGETParams) (*FindByCourseUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindByCourseUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findByCourseUsingGET",
		Method:             "GET",
		PathPattern:        "/api/enrollments/course/{id}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindByCourseUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindByCourseUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findByCourseUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindByIDUsingGET finds a specific enrollment
*/
func (a *Client) FindByIDUsingGET(params *FindByIDUsingGETParams) (*FindByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/api/enrollments/{id}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findByIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListUsingGET lists of available enrollments
*/
func (a *Client) ListUsingGET(params *ListUsingGETParams) (*ListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listUsingGET",
		Method:             "GET",
		PathPattern:        "/api/enrollments",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveByIDUsingDELETE deletes a specific enrollment
*/
func (a *Client) RemoveByIDUsingDELETE(params *RemoveByIDUsingDELETEParams) (*RemoveByIDUsingDELETEOK, *RemoveByIDUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveByIDUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeByIdUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/api/enrollments/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveByIDUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RemoveByIDUsingDELETEOK:
		return value, nil, nil
	case *RemoveByIDUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enrollment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUsingPUT updates an enrollment
*/
func (a *Client) UpdateUsingPUT(params *UpdateUsingPUTParams) (*UpdateUsingPUTCreated, *UpdateUsingPUTAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/api/enrollments",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json;charset=UTF-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateUsingPUTCreated:
		return value, nil, nil
	case *UpdateUsingPUTAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enrollment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
